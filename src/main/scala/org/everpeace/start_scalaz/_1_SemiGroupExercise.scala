package org.everpeace.start_scalaz

import scalaz._
import Scalaz._

object _1_SemiGroupExercise {

  def main(args: Array[String]): Unit = {
    CodesInSlides
    Exercise
  }

  object CodesInSlides {

    case class Point(x: Int, y: Int) {
      def +(p: Point) = Point(x + p.x, y + p.y)
    }

    object Point {
      // Defining Semigroup instance.
      implicit object PointInstance extends Semigroup[Point] {
        def append(p1: Point, p2: => Point) = p1 + p2
      }
    }

    // Syntax for Semigroup.
    // This is provided by a SemigroupOps instance generated by implicit conversions.
    def double[A](a: A)(implicit s: Semigroup[A]) = a |+| a

    // Scalaz supports "deriving" typical type class instances.
    implicit val PointShow = Show.showA[Point]
    implicit val PointEqual = Equal.equalA[Point]

    double(2) assert_=== 4
    double("2") assert_=== "22"
    double(Point(1, 2)) assert_=== Point(2, 4)

    // Syntax for Show. (also provided by ShowOps)
    def quote[A: Show](a: A) = a.show.mkString("'", "", "'")

    quote("geso") assert_=== "'geso'"
    quote(List(1, 2, 3)) assert_=== "'[1,2,3]'"
  }

  object Exercise {

    // 1. Give a Show instance for Vector.
    object vector {
      implicit def VectorShow[A]: Show[Vector[A]] = new Show[Vector[A]] {
        def show(v: Vector[A]) = v.toString.toList
      }
    }

    import vector._

    assert(implicitly[Show[Vector[Int]]].shows(Vector(1)) == "Vector(1)")
    assert(implicitly[Show[Vector[String]]].shows(Vector("geso")) == "Vector(geso)")


    // 2. Define Semigroup and Show instances for Rational below.
    case class Rational(n: Int, d: Int) {
      def +(r: Rational) = Rational(n * r.d + r.n * d, d * r.d)

      override def toString = s"$n/$d"
    }

    object Rational {

      implicit object RationalSemigroup extends Semigroup[Rational] {
        def append(f1: Rational, f2: => Rational) = f1 + f2
      }

      implicit val RationalShow = new Show[Rational] {
        def show(f: Rational) = f.toString.toList
      }
    }

    assert(implicitly[Show[Rational]].shows(Rational(1, 2)) == "1/2")
    assert(implicitly[Semigroup[Rational]].append(Rational(1, 2), Rational(1, 2)) == Rational(4, 4))
  }

}
